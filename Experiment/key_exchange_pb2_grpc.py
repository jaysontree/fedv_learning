# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import key_exchange_pb2 as key__exchange__pb2


class KeyExchangerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.QueryPubKey = channel.unary_unary(
                '/FedV.KeyExchanger/QueryPubKey',
                request_serializer=key__exchange__pb2.NodeId.SerializeToString,
                response_deserializer=key__exchange__pb2.PubKey.FromString,
                )
        self.PutPubKey = channel.stream_unary(
                '/FedV.KeyExchanger/PutPubKey',
                request_serializer=key__exchange__pb2.PubKey.SerializeToString,
                response_deserializer=key__exchange__pb2.KeyInfo.FromString,
                )
        self.ExchangeDone = channel.unary_unary(
                '/FedV.KeyExchanger/ExchangeDone',
                request_serializer=key__exchange__pb2.NodeId.SerializeToString,
                response_deserializer=key__exchange__pb2.ServerInfo.FromString,
                )


class KeyExchangerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def QueryPubKey(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PutPubKey(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExchangeDone(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_KeyExchangerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'QueryPubKey': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryPubKey,
                    request_deserializer=key__exchange__pb2.NodeId.FromString,
                    response_serializer=key__exchange__pb2.PubKey.SerializeToString,
            ),
            'PutPubKey': grpc.stream_unary_rpc_method_handler(
                    servicer.PutPubKey,
                    request_deserializer=key__exchange__pb2.PubKey.FromString,
                    response_serializer=key__exchange__pb2.KeyInfo.SerializeToString,
            ),
            'ExchangeDone': grpc.unary_unary_rpc_method_handler(
                    servicer.ExchangeDone,
                    request_deserializer=key__exchange__pb2.NodeId.FromString,
                    response_serializer=key__exchange__pb2.ServerInfo.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'FedV.KeyExchanger', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class KeyExchanger(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def QueryPubKey(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/FedV.KeyExchanger/QueryPubKey',
            key__exchange__pb2.NodeId.SerializeToString,
            key__exchange__pb2.PubKey.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PutPubKey(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/FedV.KeyExchanger/PutPubKey',
            key__exchange__pb2.PubKey.SerializeToString,
            key__exchange__pb2.KeyInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ExchangeDone(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/FedV.KeyExchanger/ExchangeDone',
            key__exchange__pb2.NodeId.SerializeToString,
            key__exchange__pb2.ServerInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
